import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor

import os

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ Render (–∞–±–æ –∑–∞–º—ñ–Ω–∏ "YOUR_BOT_TOKEN" —Å–≤–æ—ó–º —Ç–æ–∫–µ–Ω–æ–º)
TOKEN = os.getenv("BOT_TOKEN")

# –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —á–∞–π–æ–≤–∏—Ö
def calculate_tips(amount):
    amount = round(amount, 2)  # –û–∫—Ä—É–≥–ª—é—î–º–æ –≤–≤–µ–¥–µ–Ω—É —Å—É–º—É –¥–æ –∫–æ–ø—ñ–π–æ–∫
    dishwasher_share = amount * 0.2  # 20% –º–∏–π—Ü—ñ
    waiter_share = (amount - dishwasher_share) / 2  # 40% –∫–æ–∂–Ω–æ–º—É –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—É

    # –û–∫—Ä—É–≥–ª—é—î–º–æ –≤–Ω–∏–∑ —á–∞—Å—Ç–∫—É –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—ñ–≤ –¥–æ –∫–æ–ø—ñ–π–æ–∫
    waiter_share = round(waiter_share, 2)
    dishwasher_share = round(amount - (waiter_share * 2), 2)  # –í—Å—ñ –∑–∞–ª–∏—à–∫–∏ –π–¥—É—Ç—å –º–∏–π—Ü—ñ

    return dishwasher_share, waiter_share, waiter_share

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥–∏ —Å—É–º—É —á–∞–π–æ–≤–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 100.50), —ñ —è –ø–æ–¥—ñ–ª—é —ó—ó –º—ñ–∂ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º.")

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö —á–∏—Å–µ–ª
@dp.message_handler(lambda message: message.text.replace('.', '', 1).isdigit())
async def handle_tip_amount(message: Message):
    amount = float(message.text)
    dishwasher, waiter1, waiter2 = calculate_tips(amount)
    response = (
        f"üí∞ **–†–æ–∑–ø–æ–¥—ñ–ª —á–∞–π–æ–≤–∏—Ö:**\n"
        f"üçΩ –ü–æ—Å—É–¥–æ–º–∏–π–∫–∞: **{dishwasher}$**\n"
        f"üë®‚Äçüç≥ –û—Ñ—ñ—Ü—ñ–∞–Ω—Ç 1: **{waiter1}$**\n"
        f"üë©‚Äçüç≥ –û—Ñ—ñ—Ü—ñ–∞–Ω—Ç 2: **{waiter2}$**"
    )
    await message.reply(response, parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
